package com.ktw.bitbit.view;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.drawable.Drawable;import android.text.Spannable;import android.text.SpannableString;import android.text.TextUtils;import android.text.style.ImageSpan;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.RelativeLayout;import androidx.annotation.NonNull;import androidx.viewpager.widget.PagerAdapter;import androidx.viewpager.widget.ViewPager;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.load.resource.gif.GifDrawable;import com.bumptech.glide.request.RequestListener;import com.bumptech.glide.request.target.Target;import com.google.android.material.tabs.TabLayout;import com.ktw.bitbit.FLYApplication;import com.ktw.bitbit.R;import com.ktw.bitbit.bean.collection.Collectiion;import com.ktw.bitbit.broadcast.OtherBroadcast;import com.ktw.bitbit.ui.me.emot.EmotPackageActivity;import com.ktw.bitbit.ui.me.emot.MyEmotBean;import com.ktw.bitbit.ui.me.emot.MyEmotPackageActivity;import com.ktw.bitbit.util.SmileyParser;import java.lang.ref.SoftReference;import java.util.ArrayList;import java.util.List;import java.util.Map;import co.ceryle.fitgridview.FitGridAdapter;import co.ceryle.fitgridview.FitGridView;/** * 表情界面 * * @author Administrator */public class ChatFaceView2 extends RelativeLayout {    private Context mContext;    private TabLayout tabLayout;    private ViewPager mViewPager;    private List<TabLayout.Tab> emotPackageTabList = new ArrayList<>();    private SingleEmotAdapter singleEmotAdapter;    private ImageView ivAddEmot;    private ImageView ivSetEmot;    // 表情总数据    private EmotionClickListener mEmotionClickListener;    private BroadcastReceiver refreshCollectionListBroadcast = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (action.equals(OtherBroadcast.SYNC_EMOT_REFRESH)) {                if (singleEmotAdapter != null) {                    singleEmotAdapter.notifyDataSetChanged();                }            } else if (action.equals(OtherBroadcast.SYNC_EMOT_PACKAGE_ADD)) {                String name = intent.getStringExtra("name");                if (!TextUtils.isEmpty(name)) {                    addTab(name);                }            } else if (action.equals(OtherBroadcast.SYNC_EMOT_PACKAGE_REMOVE)) {                String name = intent.getStringExtra("name");                if (!TextUtils.isEmpty(name)) {                    removeTab(name);                }            }        }    };    @Override    protected void onAttachedToWindow() {        super.onAttachedToWindow();        IntentFilter filter = new IntentFilter();        filter.addAction(OtherBroadcast.SYNC_EMOT_REFRESH);//添加单个表情        filter.addAction(OtherBroadcast.SYNC_EMOT_PACKAGE_ADD);//添加表情包        filter.addAction(OtherBroadcast.SYNC_EMOT_PACKAGE_REMOVE);//移除表情包        getContext().registerReceiver(                refreshCollectionListBroadcast, filter);    }    @Override    protected void onDetachedFromWindow() {        super.onDetachedFromWindow();        getContext().unregisterReceiver(refreshCollectionListBroadcast);    }    public ChatFaceView2(Context context) {        super(context);        init(context);    }    public ChatFaceView2(Context context, AttributeSet attrs) {        super(context, attrs);        init(context);        initAttrs(attrs);    }    public ChatFaceView2(Context context, AttributeSet attrs, int defStyle) {        super(context, attrs, defStyle);        init(context);        initAttrs(attrs);    }    private void initAttrs(AttributeSet attrs) {        if (attrs == null) {            return;        }    }    public void addTab(String name) {        TabLayout.Tab tab = tabLayout.newTab();        tab.setText(name);        emotPackageTabList.add(tab);        tabLayout.addTab(tab);    }    public void removeTab(String name) {        if (!TextUtils.isEmpty(name)) {            for (TabLayout.Tab tab : emotPackageTabList) {                if (name.equals(tab.getText())) {                    tabLayout.removeTab(tab);                }            }        }    }    private static int dip_To_px(Context context, int dipValue) {        final float scale = context.getResources().getDisplayMetrics().density;        return (int) (dipValue * scale + 0.5f);    }    private void init(Context context) {        mContext = context;        LayoutInflater.from(mContext).inflate(R.layout.chat_face_view2, this);        tabLayout = findViewById(R.id.tabLayout);        mViewPager = findViewById(R.id.view_pager);        tabLayout.addTab(tabLayout.newTab().setText(mContext.getString(R.string.emoji)));        tabLayout.addTab(tabLayout.newTab().setText(mContext.getString(R.string.custom_emoticons)));        if (FLYApplication.emotMap.size() > 0) {            for (Map.Entry<String, List<String>> entry : FLYApplication.emotMap.entrySet()) {                TabLayout.Tab tab = tabLayout.newTab();                tab.setText(entry.getKey());                emotPackageTabList.add(tab);                tabLayout.addTab(tab);            }        }        switchViewPager1();        tabLayout.addOnTabSelectedListener(new TabLayout.BaseOnTabSelectedListener() {            @Override            public void onTabSelected(TabLayout.Tab tab) {                if (tab.getPosition() == 0) {                    switchViewPager1();                } else if (tab.getPosition() == 1) {                    switchViewPager3();                } else {                    switchViewPager4(FLYApplication.emotMap.get(tab.getText()));                }            }            @Override            public void onTabUnselected(TabLayout.Tab tab) {            }            @Override            public void onTabReselected(TabLayout.Tab tab) {            }        });        ivAddEmot = findViewById(R.id.ivAddEmot);        ivAddEmot.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                Intent intent = new Intent(mContext, EmotPackageActivity.class);                mContext.startActivity(intent);            }        });        ivSetEmot = findViewById(R.id.ivSetEmot);        ivSetEmot.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                Intent intent = new Intent(mContext, MyEmotPackageActivity.class);                mContext.startActivity(intent);            }        });    }    /*    Collections     */    public void switchViewPager3() {        singleEmotAdapter = new SingleEmotAdapter(                getContext(),                FLYApplication.singleEmotList,                c -> {                    // 发送自定义表情                    mEmotionClickListener.onCustomEmotClick(c.getUrl());                }        );        mViewPager.setAdapter(singleEmotAdapter);    }    public void switchViewPager4(List<String> emotBeanList) {        mViewPager.setAdapter(new EmotAdapter(                getContext(),                emotBeanList,                c -> {                    // 发送自定义表情                    mEmotionClickListener.onEmotPackageClick(c);                }        ));    }    /*    Emotion     */    private void switchViewPager1() {        EmojiPager1Adapter emojiAdapter = new EmojiPager1Adapter(                getContext(),                SmileyParser.Smilies.getIds(),                SmileyParser.Smilies.getTexts(),                ss -> {                    mEmotionClickListener.onNormalFaceClick(ss);                }        );        mViewPager.setAdapter(emojiAdapter);    }    public void setEmotionClickListener(EmotionClickListener listener) {        mEmotionClickListener = listener;    }    public interface EmotionClickListener {        void onNormalFaceClick(SpannableString ss);        void onGifFaceClick(String resName);        void onCollecionClick(String collection);        void onCustomEmotClick(String name);        void onEmotPackageClick(String emot);    }    interface OnEmojiClickListener {        void onEmojiClick(SpannableString ss);    }    interface OnGifClickListener {        void onGifClick(String text);    }    interface OnCollectionClickListener {        void onCollectionClick(MyEmotBean c);    }    interface OnCollectionClic2kListener {        void onCollectionClick(String c);    }    static class EmojiAdapter extends FitGridAdapter {        private final Context ctx;        private final int[] idList;        public EmojiAdapter(Context ctx, int[] idList) {            super(ctx, R.layout.item_face_emotion);            this.ctx = ctx;            this.idList = idList;        }        @Override        public int getCount() {            return idList.length;        }        @Override        public Object getItem(int position) {            return idList[position];        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public boolean hasStableIds() {            return true;        }        @Override        public void onBindView(int position, View view) {            ImageView ivEmoji = (ImageView) view;            if (position >= idList.length) {                ivEmoji.setImageDrawable(null);                return;            }            int res = idList[position];            ivEmoji.setImageResource(res);        }    }    static class GifAdapter extends FitGridAdapter {        private final Context ctx;        private final int[] idList;        GifAdapter(Context ctx, int[] idList) {            super(ctx, R.layout.item_face_gif);            this.ctx = ctx;            this.idList = idList;        }        @Override        public int getCount() {            return idList.length;        }        @Override        public Object getItem(int position) {            return idList[position];        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public void onBindView(int position, View view) {            ImageView ivEmoji = (ImageView) view;            int res = idList[position];            ivEmoji.setImageResource(res);        }    }    static class CollectionAdapter extends FitGridAdapter {        private final Context ctx;        private final List<MyEmotBean> collectionList;        CollectionAdapter(Context ctx, List<MyEmotBean> collectionList) {            super(ctx, R.layout.item_face_collection);            this.ctx = ctx;            this.collectionList = collectionList;        }        @Override        public int getCount() {            return collectionList.size();        }        @Override        public Object getItem(int position) {            return collectionList.get(position);        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public void onBindView(int position, View view) {            ImageView ivEmoji = (ImageView) view;            MyEmotBean c = collectionList.get(position);            // 保留旧代码，            String url = c.getUrl();            if (url.endsWith(".gif")) {//                Glide.with(ctx)//                        .load(url)//                        .asGif()//                        .diskCacheStrategy(DiskCacheStrategy.SOURCE)//                        .into(ivEmoji);                Glide.with(ctx)                        .load(url)                        .asGif()                        .diskCacheStrategy(DiskCacheStrategy.SOURCE)                        .listener(new RequestListener<String, GifDrawable>() {                                      @Override                                      public boolean onException(Exception e, String model, Target<GifDrawable> target, boolean isFirstResource) {                                          //如果gif不能显示，就直接通过图片形式获取                                          Glide.with(ctx)                                                  .load(url)                                                  .placeholder(R.drawable.ffb)                                                  .error(R.drawable.fez)                                                  .diskCacheStrategy(DiskCacheStrategy.SOURCE)                                                  .dontAnimate()                                                  .into(ivEmoji);                                          return true;                                      }                                      @Override                                      public boolean onResourceReady(GifDrawable resource, String model, Target<GifDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {                                          return false;                                      }                                  }                        ).into(ivEmoji);            } else {                Glide.with(ctx)                        .load(url)                        .placeholder(R.drawable.ffb)                        .error(R.drawable.fez)                        .dontAnimate()                        .into(ivEmoji);            }        }    }    static class Collection2Adapter extends FitGridAdapter {        private final Context ctx;        private final List<String> collectionList;        Collection2Adapter(Context ctx, List<String> collectionList) {            super(ctx, R.layout.item_face_collection);            this.ctx = ctx;            this.collectionList = collectionList;        }        @Override        public int getCount() {            return collectionList.size();        }        @Override        public Object getItem(int position) {            return collectionList.get(position);        }        @Override        public long getItemId(int position) {            return position;        }        @Override        public void onBindView(int position, View view) {            ImageView ivEmoji = (ImageView) view;            String url = collectionList.get(position);            // 保留旧代码，            if (url.endsWith(".gif")) {                Glide.with(ctx)                        .load(url)                        .asGif()                        .diskCacheStrategy(DiskCacheStrategy.SOURCE)                        .into(ivEmoji);            } else {                Glide.with(ctx)                        .load(url)                        .placeholder(R.drawable.ffb)                        .error(R.drawable.fez)                        .dontAnimate()                        .into(ivEmoji);            }        }    }    static class EmojiPager1Adapter extends PagerAdapter {        // 弱引用缓存表情第一页，用来加速加载，        private static SoftReference<FitGridView> softFirstPage = new SoftReference<>(null);        private int[][] idMatrix;        // 表情符号所代表的英文字符        private String[][] strMatrix;        private OnEmojiClickListener listener;        private Context ctx;        EmojiPager1Adapter(Context ctx, int[][] idMatrix, String[][] strMatrix, OnEmojiClickListener listener) {            this.ctx = ctx;            this.idMatrix = idMatrix;            this.strMatrix = strMatrix;            this.listener = listener;        }        @Override        public int getCount() {            return idMatrix.length;        }        @Override        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {            container.removeView((View) object);        }        @NonNull        @Override        public Object instantiateItem(@NonNull ViewGroup container, int pagePosition) {            int[] idList = idMatrix[pagePosition];            String[] strList = strMatrix[pagePosition];            FitGridView gridView = null;            if (0 == pagePosition) {                gridView = softFirstPage.get();            }            if (gridView == null) {                gridView = (FitGridView) LayoutInflater.from(ctx).inflate(R.layout.emotion_gridview, container, false);                gridView.setSelector(R.drawable.chat_face_bg);                gridView.setFitGridAdapter(new EmojiAdapter(ctx, idList));                if (0 == pagePosition) {                    softFirstPage = new SoftReference<>(gridView);                }            }            container.addView(gridView);            gridView.setOnItemClickListener((parent, view, itemPosition, id) -> {                if (listener != null) {                    int res = idList[itemPosition];                    String text = strList[itemPosition];                    SpannableString ss = new SpannableString(text);                    Drawable d = ctx.getResources().getDrawable(res);                    // 设置表情图片的显示大小                    d.setBounds(0, 0, (int) (d.getIntrinsicWidth() / 1.95), (int) (d.getIntrinsicHeight() / 1.95));                    ImageSpan span = new ImageSpan(d, ImageSpan.ALIGN_BOTTOM);                    ss.setSpan(span, 0, text.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);                    listener.onEmojiClick(ss);                }            });            return gridView;        }        @Override        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            return view == object;        }    }    static class EmojiPager2Adapter extends PagerAdapter {        private int[][] idMatrix;        // 表情符号所代表的英文字符        private String[][] strMatrix;        private OnGifClickListener listener;        private Context ctx;        EmojiPager2Adapter(Context ctx, int[][] idMatrix, String[][] strMatrix, OnGifClickListener listener) {            this.ctx = ctx;            this.idMatrix = idMatrix;            this.strMatrix = strMatrix;            this.listener = listener;        }        @Override        public int getCount() {            return idMatrix.length;        }        @Override        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {            container.removeView((View) object);        }        @NonNull        @Override        public Object instantiateItem(@NonNull ViewGroup container, int pagePosition) {            int[] idList = idMatrix[pagePosition];            String[] strList = strMatrix[pagePosition];            FitGridView gridView = (FitGridView) LayoutInflater.from(ctx).inflate(R.layout.chat_face_gridview, container, false);            container.addView(gridView);            gridView.setSelector(R.drawable.chat_face_bg);            gridView.setFitGridAdapter(new GifAdapter(ctx, idList));            gridView.setOnItemClickListener((parent, view, itemPosition, id) -> {                if (listener != null) {                    String text = strList[itemPosition];                    listener.onGifClick(text);                }            });            return gridView;        }        @Override        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            return view == object;        }    }    class SingleEmotAdapter extends PagerAdapter {        // collections_gridview里的列数乘以两行，        private final static int size = 10;        private List<MyEmotBean> emotBeanList;        private OnCollectionClickListener listener;        private Context ctx;        SingleEmotAdapter(Context ctx, List<MyEmotBean> emotBeanList, OnCollectionClickListener listener) {            this.ctx = ctx;            this.emotBeanList = emotBeanList;            this.listener = listener;        }        @Override        public int getCount() {            // 编辑按钮已经加在list开头了，            // 0舍1入，除以每页10个，            return (emotBeanList.size() + (size - 1)) / size;        }        @Override        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {            container.removeView((View) object);        }        @NonNull        @Override        public Object instantiateItem(@NonNull ViewGroup container, int pagePosition) {            FitGridView gridView = (FitGridView) LayoutInflater.from(ctx).inflate(R.layout.collections_gridview, container, false);            container.addView(gridView);            gridView.setSelector(R.drawable.chat_face_bg);            List<MyEmotBean> currentPageItemList = emotBeanList.subList(                    pagePosition * size,                    Math.min((pagePosition + 1) * size, emotBeanList.size())            );            gridView.setFitGridAdapter(new CollectionAdapter(mContext, currentPageItemList));            gridView.setOnItemClickListener((parent, view, itemPosition, id) -> {                if (listener != null) {                    listener.onCollectionClick(currentPageItemList.get(itemPosition));                }            });            return gridView;        }        @Override        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            return view == object;        }    }    class EmotAdapter extends PagerAdapter {        // collections_gridview里的列数乘以两行，        private final static int size = 10;        private List<String> emotBeanList;        private OnCollectionClic2kListener listener;        private Context ctx;        EmotAdapter(Context ctx, List<String> emotBeanList, OnCollectionClic2kListener listener) {            this.ctx = ctx;            this.emotBeanList = emotBeanList;            this.listener = listener;        }        @Override        public int getCount() {            // 编辑按钮已经加在list开头了，            // 0舍1入，除以每页10个，            return (emotBeanList.size() + (size - 1)) / size;        }        @Override        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {            container.removeView((View) object);        }        @NonNull        @Override        public Object instantiateItem(@NonNull ViewGroup container, int pagePosition) {            FitGridView gridView = (FitGridView) LayoutInflater.from(ctx).inflate(R.layout.collections_gridview, container, false);            container.addView(gridView);            gridView.setSelector(R.drawable.chat_face_bg);            List<String> currentPageItemList = emotBeanList.subList(                    pagePosition * size,                    Math.min((pagePosition + 1) * size, emotBeanList.size())            );            gridView.setFitGridAdapter(new Collection2Adapter(mContext, currentPageItemList));            gridView.setOnItemClickListener((parent, view, itemPosition, id) -> {                if (listener != null) {                    listener.onCollectionClick(currentPageItemList.get(itemPosition));                }            });            return gridView;        }        @Override        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            return view == object;        }    }    class EmojiPager3Adapter extends PagerAdapter {        // collections_gridview里的列数乘以两行，        private final static int size = 10;        private List<Collectiion> collectionList;        private ChatFaceView.OnCollectionClickListener listener;        private Context ctx;        EmojiPager3Adapter(Context ctx, List<Collectiion> collectionList, ChatFaceView.OnCollectionClickListener listener) {            this.ctx = ctx;            this.collectionList = collectionList;            this.listener = listener;        }        @Override        public int getCount() {            // 编辑按钮已经加在list开头了，            // 0舍1入，除以每页10个，            return (collectionList.size() + (size - 1)) / size;        }        @Override        public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {            container.removeView((View) object);        }        @NonNull        @Override        public Object instantiateItem(@NonNull ViewGroup container, int pagePosition) {            FitGridView gridView;            List<Collectiion> currentPageItemList = collectionList.subList(                    pagePosition * size,                    Math.min((pagePosition + 1) * size, collectionList.size())            );            if (collectionList.size() > 1) {                gridView = (FitGridView) LayoutInflater.from(ctx).inflate(R.layout.collections_gridview, container, false);                gridView.setFitGridAdapter(new ChatFaceView.CollectionAdapter(mContext, currentPageItemList));            } else {                gridView = (FitGridView) LayoutInflater.from(ctx).inflate(R.layout.collections_gridview_init, container, false);                gridView.setFitGridAdapter(new ChatFaceView.CollectionAdapterInit(mContext));            }            container.addView(gridView);            gridView.setSelector(R.drawable.chat_face_bg);            gridView.setOnItemClickListener((parent, view, itemPosition, id) -> {                if (listener != null) {                    listener.onCollectionClick(currentPageItemList.get(itemPosition));                }            });            return gridView;        }        @Override        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            return view == object;        }    }}